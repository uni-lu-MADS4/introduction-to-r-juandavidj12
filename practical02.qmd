---
title: "Getting started with R"
author: Juan David Jaramillo
date: 23/09/2024
format: html
---

### Exercise 1 {#sec-1}

* Create a vector of the letters A, B and C.

```{r}
# Your answer in code
c("A","B","C")
```
> Your answer as text



* Assign the vector to a variable `my_letters`
```{r}
# Your answer in code
my_letters<-c("A","B","C")
```


* Check the what happens when you run `letters` (just this) on the command line.
```{r}
# Your answer in code
letters
```

> Your answer as text

It appears a vector contained all the letter of alphabet

* What happens when you concatenate two vectors? Add `c(my_letters , my_letters)`
```{r}
# Your answer in code
c(my_letters,my_letters)

```

> Your answer as text

It duplicates the vector

* Add the number 1 to letters. What happens to the type of the vector?
```{r}
# Your answer in code

my_letters<-c(1,my_letters)
my_letters
typeof(my_letters)
```

> Your answer as text

It becomes as character

### Exercise 2


1. Create a vector `my_vec` with the numbers from 1 through 8.
2. Apply the operation `+2` to the vector/
3. Add the vector containing 1, 2, 3, 4 to `my_vec`. What do you observe?

```{r}
# Your answer in code
#1 
my_vec<-c(1:8)
#2
my_vec<-my_vec+2
#3
my_vec + c(1:4)

```



### Exercise 3

* Consider the R output of the matrix below:

```
 [,1] [,2]
 [1,]    4    1
 [2,]    9    5
 [3,]   10    7
```

1. What was one of the correct commands used to write this matrix?
2. Assign the matrix as `A`
3. Check the dimensions
4. Extract the element `5`
5. Add the vector `c(0,0,0)` as a new column and update `A`
6. Modify the element 4 to `0`
7. Compute the transpose of `A`

```{r}
# Your answer in code
#1
matrix(c(4,9,10,1,5,7),ncol=2,nrow=3)
#2
A<-as.matrix(matrix(c(4,9,10,1,5,7),ncol=2,nrow=3))
#3
dim(A)
#4
A[5]
#5
A<-cbind(A,c(0,0,0))
A
#6
A[4]<-0
A
#7
t(A)
```


8. Are any values in `A` larger than 10?  R:No. 
```{r}
# Your answer in code
A>10
#or
A[A>10]
```

9. Are all values in `A` smaller than 10? R:No
```{r}
# Your answer in code
A<10
```

### Exercise 4

1. Create a function that sums up two values even if provided as characters values

```{r}
# Your answer in code

myfunction<- function(x,y) {
  x<-as.numeric(x)
  y<-as.numeric(y)
  print(x+y)
}

myfunction(3,4)
myfunction("3","4")
```


### Exercise 5

1. Create a function that returns the mean, median and standard deviation.

```{r}
# Your answer in code
myfunction2<-function(x){
  x<-as.vector(x)
  x<-as.numeric(x)
  print(paste("The mean is",mean(x)))
  print(paste("The median is",median(x)))
  print(paste("The Standard deviation is",sd(x)))
}
test<-c(1:10)
myfunction2(test)
```


### Exercise 6
1. Create a pipe statement that counts the number of NAs in vector containing numbers, characters and missing values.
The output of `c('1' , "a", NA, "2", NA)` should be 2.

```{r}
# Your answer in code
x<- c('1' , "a", NA, "2", NA)   #Here you put any vector, in this case the one given in the exercise
x[is.na(x)] |> length()

```


